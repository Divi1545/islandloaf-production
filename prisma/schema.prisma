// This is your Prisma schema file for IslandLoaf
// Learn more about Prisma here: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User / Vendor model
model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  password         String
  email            String    @unique
  fullName         String    @map("full_name")
  businessName     String    @map("business_name")
  businessType     String    @map("business_type")
  role             String    @default("vendor")
  categoriesAllowed Json?    @map("categories_allowed") @default("[]")
  createdAt        DateTime  @default(now()) @map("created_at")
  
  // Relations
  services         Service[]
  calendarEvents   CalendarEvent[]
  calendarSources  CalendarSource[]
  bookings         Booking[]
  notifications    Notification[]
  marketingContents MarketingContent[]
  pricingRules     PricingRule[]

  @@map("users")
}

// Service model
model Service {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  name        String
  description String
  type        String    // stay, transport, tour, wellness, ticket, product
  basePrice   Float     @map("base_price")
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  calendarEvents CalendarEvent[]
  calendarSources CalendarSource[]
  bookings    Booking[]
  marketingContents MarketingContent[]
  pricingRules PricingRule[]

  @@map("services")
}

// Calendar Event model
model CalendarEvent {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  serviceId   Int?      @map("service_id")
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  title       String
  isBooked    Boolean   @default(false) @map("is_booked")
  isPending   Boolean   @default(false) @map("is_pending")
  isBlocked   Boolean   @default(false) @map("is_blocked")
  source      String?   @default("direct")
  externalId  String?   @map("external_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  service     Service?  @relation(fields: [serviceId], references: [id])

  @@map("calendar_events")
}

// Calendar Source model (external calendars like Google, Airbnb, Booking.com)
model CalendarSource {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  serviceId   Int?      @map("service_id")
  name        String
  url         String
  type        String    // google, airbnb, booking.com, etc.
  lastSynced  DateTime? @map("last_synced")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  service     Service?  @relation(fields: [serviceId], references: [id])

  @@map("calendar_sources")
}

// Booking model
model Booking {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  serviceId   Int       @map("service_id")
  customerName String    @map("customer_name")
  customerEmail String   @map("customer_email")
  customerPhone String?  @map("customer_phone")
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  status      String    @default("pending") // pending, confirmed, completed, cancelled, refunded
  totalPrice  Float     @map("total_price")
  commission  Float     @default(0)
  notes       String?
  details     Json?     // Flexible field for storing booking-specific details based on type
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

// Notification model
model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  title       String
  message     String
  type        String    // info, warning, error, success
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Marketing Content model
model MarketingContent {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  serviceId   Int?      @map("service_id")
  title       String
  content     String    @db.Text
  contentType String    @map("content_type") // instagram, facebook, seo, email
  serviceDescription String? @map("service_description") @db.Text
  targetAudience String? @map("target_audience")
  tone         String?
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  service     Service?  @relation(fields: [serviceId], references: [id])

  @@map("marketing_contents")
}

// Pricing Rules model
model PricingRule {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  serviceId   Int       @map("service_id")
  name        String
  type        String    // seasonal, weekday, special, discount
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  adjustment  Float     // Percentage or fixed amount
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("pricing_rules")
}

// System Settings model
model SystemSetting {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  value       String
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("system_settings")
}